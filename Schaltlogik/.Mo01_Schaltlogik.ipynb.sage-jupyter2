{"attachments":{"image-2.png":{"type":"sha1","value":"1c9817f7f561f2a968f70eec78fb1cf3ee33d26d"},"image.png":{"type":"sha1","value":"42dc813472d2a23323e6841ced5ba7eed8e783a3"}},"cell_type":"markdown","id":"76bf7f","input":"**Lösung:**\\\nEin OR-Gatter lässt sich folgendermaßen realisieren:\\\n\\\n![OR-Gatter.png](attachment:image.png)\\\n*Abb. 1.3.1: OR-Gatter*\\\n\\\nIst A und / oder B High (also auf einem Potential von 5V / 1), so kann ein Strom durch D1 bzw. D2 zu GND fließen. Dabei fällt die Spannung an R1 ab. Da C zwischen D1 / D2 und R1 angebracht ist, ist C dann ebenfalls High. Falls A und B Low (also auf einem Potentail von 0V / 0) sind, fließt nirgendswo ein Strom und an R1 fällt keine Spannung ab, also ist C ebenfalls Low. Die Wahrheitstabelle lautet:\\\n\\\n![OR-Wahrheitstabelle](attachment:image-2.png)\\\n*Abb. 1.3.2: OR Wahrheitstabelle*","pos":8,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"2f41ab770d9c7e5b292ea2c0015b45f99f48cd95"},"image.png":{"type":"sha1","value":"97c6f6531d049bf4ad4a7f97407fc529e354a961"}},"cell_type":"markdown","id":"e3edc2","input":"**Lösung:**\\\nDie Wahrheitstabelle der XOR-Funktion lautet:\\\n\\\n![XOR-Wahrheitstabelle](attachment:image.png)\\\n*Abb. 2.2.1: XOR Wahrheitstabelle*\\\n\\\nEs wird also dann, und nur dann, Wahr zurückgegeben, falls die Eingaben A und B verschieden sind. \nDie disjunktive Normalenform lautet: $(\\bar A \\wedge B) \\vee (A \\wedge \\bar B)$, wobei $\\bar Q$ für die boolsche Negation von $Q$ steht. Zur Realisierung dieser Schaltung braucht man also insgesamt vier Eingaben, wobei zwei davon die Negation der anderen Beiden sind. Ein Schaltplan sieht folgendermaßen aus:\\\n\\\n![XOR-Gatter](attachment:image-2.png)\\\n*Abb. 2.2.2: XOR-Gatter*\\\n\\\nDie linken Bauteile ($7400N$) negieren jeweils A und B. Das Ergebnis wird dann mit dem jeweils anderen Wert in einem AND-Gatter kombiniert. Das ist der $(\\bar A \\wedge B) $ bzw. $ (A \\wedge \\bar B)$ Teil der disjunktiven Normalenform. Der $\\vee$ Schritt wird mit Bauteil $7432N$ realisiert.\n\n","pos":12,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"43c419d9ffb013ac98c89b8940b6593ad0f94b99"},"image.png":{"type":"sha1","value":"fc7afe02068518f3204033f34169682ccb9ba1ae"}},"cell_type":"markdown","id":"47e884","input":"**Lösung:**\\\nDie Umformung funktioniert folgendermaßen:\\\n\\\n![Umformung XOR](attachment:image.png)\\\n*Abb. 2.3.1: Umformung XOR*\\\n\\\nVon $(1)$ nach $(2)$ wurde ledigliech zweimal die Identität hinzugefügt, dann vereinfacht. In $(4)$ und $(6)$ wurde ausgenutzt, dass $\\overline{\\overline x} = x$.\\\nDie zugehörige Schaltung ist:\\\n\\\n![XOR Gatter2](attachment:image-2.png)\\\n*Abb. 2.3.2: XOR-Gatter 2*\\\n\\\nDer Teil $(\\overline{A\\wedge B}) = \\neg(A\\wedge B) $ lässt sich mit einem NAND-Gatter realisieren. Alle andere Teile folgen genau dem gleichen Schema, weshalb sich die gesamte Schaltung mit NAND-Gattern aufbauen lässt.","pos":14,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"55bafcc4f2801b48a94092aa5bede92121f8eeec"},"image.png":{"type":"sha1","value":"fa0d7cf433f645b30dd3b672289a100650eee408"}},"cell_type":"markdown","id":"388437","input":"**Lösung:**  \nDer Volladdierer ist etwas komplexer. Hier soll ein dritter Wert, nämlich der Übertrag einer vorherigen Addition, berücksichtig werden. Dieser ist mit den eigentlichen Eingängen A und B gleichberechtigt. In der Wahrheitstabelle wird der Übertrag aus der vorhergehenden Rechnung mit C bezeichnet. Die Wahrheitstabelle lautet dann:\n\n![Volladdierer-Wahrheitstabelle](attachment:image.png)  \n_WahrheitAbb. 3.2.1: stabelle Volladdierer_  \n\nDie dazugehörige Schaltung ist:  \n\n![Volladdierer-Schaltplan](attachment:image-2.png)  \n_Abb. 3.2.2: Volladdierer Schaltplan_  \n\nZuerst wird der Wert von A und B mit einem Halbaddierer addiert. Die Summe von A und B wird dann mit dem Übertrag in einem Halbaddierer addiert. Die Summe des Volladdierers ist die Summe des letzten Halbaddierers. Der Übertrag des Volladdierers ist der Output eines OR\\-Gatters mit den Eingängen des Übertrags der zweiten Halbaddition und des Übertrags der ersten Halbaddition. Es ist festzustellen, dass bei dem OR\\-Gatter niemals beide Eingänge eins sein können, da sonst A oder B gleichzeitg eins oder null sein müsste.   \nWenn man die Summe zweier Binärzahlen berechnen will, so muss jede Stelle mit einem Volladdierer addiert werden. Bei der letzten Stelle \\(und damit bei den ersten zwei Bit, die in den Volladdierer Eingegeben werden\\), ist der Übertrag 0.\n\n","pos":18,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"642f7af51c238aee297835021959eb624b051492"},"image.png":{"type":"sha1","value":"1f0d18b2304b6b8ab36a655231b04a0fafed4e43"}},"cell_type":"markdown","id":"cadd4d","input":"**Lösung:**  \nDie Funktionstablle lautet:  \n  \n![RS-FF-Funktionstabelle](attachment:image.png)  \n_Abb. 4.1.1: RS\\-FF Funktionstabelle_  \n  \nIst R eins, so wird Q auf null gesezt. Ist dagegen S eins, so wird Q auf eins gesetzt. Es darf nicht passieren, dass S und R gleichzeitig eins sind, denn sonst wäre $Q = \\overline{Q}$, was ein offensichtlicher Widerspruch ist.\nDer Schaltplan ist:   \n  \n![RS-FF-Schaltung](attachment:image-2.png)  \n_Abb. 4.1.2: RS\\-FF Schaltung_  \n  \nDie Negation der Eingänge S und R ist zu beachten. \n","pos":20,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"6dd082854f466325a286b9358ce9f64d47896e8d"},"image.png":{"type":"sha1","value":"16cf9c39c91c2b06f053e7b6d3ae1f839d45f9e7"}},"cell_type":"markdown","id":"e8cffe","input":"**Lösung:**  \nDie Wahrheitstabelle ist wie folgt:  \n  \n![Addierer-Wahrheitstabelle](attachment:image.png)  \n_Abb. 3.1.1: Halbaddierer Wahrheitstabelle_  \n  \nWenn A und B beide null sind, ist deren Summe auch null. Falls nur eine der beiden nicht null ist, ist das Ergebnis eins. Falls beide eins sind, ist das Ergebnis 2, in binärer Schreibweise also 10. D.h., dass der Übertrag eins ist, während das Ergebnis wieder null ist. Es ist zu erkennen, dass die Summe der XOR\\-Wert von A und B ist, während der Übertrag der AND\\-Wert von A und B ist. Deshalb sieht das Schaltbild folgendermaßen aus:  \n  \n![Halbaddierer-Schaltplan](attachment:image-2.png)  \n_Abb. 3.1.2: Halbaddierer Schaltplan_\n","pos":16,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"992de5c6942abc38fd91f10535ae9c999a16772e"},"image.png":{"type":"sha1","value":"f20dbd84fdb6c2eb8b806ef8cdb27afb92d06a63"}},"cell_type":"markdown","id":"e625b3","input":"**Lösung:**  \nDer JK\\-MS\\-FF wird anders als der RST\\-FF nicht mit dem Zustand des Taktes gesteuert, sondern mit der \"Änderung\" des Zustandes des Takts, der sog. Taktflanke. Diese ist Positiv, falls von Low zu High gewechselt wird, und negativ, falls von High zu Low gewechselt wird.   \nDie Bezeichnung \"Master\\-Slave\" kommt daher, dass dieser Flip\\-Flop eine Hintereinanderschaltung von zwei RST\\-FF ist. Der erste Flip\\-Flop heißt Master, der dahintergeschaltete Slave. Sie sind so aneinandergeschaltet, dass der Ausgang des Masters, $Q_{master}$ der Eingang des Slaves \\(bei S bzw. R\\) ist. Der Takt wird zwischen dem Slave und dem Master negiert. Dies führt zur oben beschriebenen Taktflankensteuerung. Der Schalplan sieht folgendermaßen aus:  \n\n![JK-MS-FF-Schaltplan](attachment:image.png)  \n_Abb. 4.3.1: JK\\-MS\\-FF\\-Schaltplan_  \n\nWenn der Takt High ist, speichert der Master FF die Eingänge J und K normal als Ausgang des Masters. Der Slave ist während dessen inaktiv, da dessen Takt auf Low ist. Beim Taktübergang übernimmt der Slave den Ausgang des Masters in den jeweiligen S bzw. R Eingang. Nun ist der Takt des Masters Low, dieser ist folgich nicht aktiv. Die Funktionstabelle lautet:\n\n![JK-MS-FF-Funktionstabelle](attachment:image-2.png)  \n_Abb. 4.3.2: JK\\-MS\\-FF Funktionstabelle_\n\n","pos":24,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"c10d9956f6e40c355fef6cca39eaae2ce31f470e"},"image.png":{"type":"sha1","value":"f48a720b761769c2668d44f41e65402f9405a669"}},"cell_type":"markdown","id":"7628c9","input":"**Lösung:**\\\nDer Schaltplan für ein 4-Bit-Asynchronzähler sieht folgendermaßen aus:\\\n\\\n![4-Bit-Asynchronzähler-Plan](attachment:image.png)\\\n*Abb. 6.1.1: 4-Bit-Asynchronzähler Schaltplan*\\\n\\\nWie das 4-Bit-Schieberegister besteht der 4-Bit-Asynchronzähler ebenfalls aus 4 JK-MS-FF. Diese sind jedoch etwas anders miteinander verbunden: der erste Q Ausgang des $n-1$ JK-MS-FF ist jeweils an den $\\overline{T}$ Eingang des $n$ JK-MS-FF angebracht. Alle JK-MS-FF können mit dem C Input resetet werden. Dadurch gibt sich für die Ausgänge $Q_i$ nach dem i-ten JK-MS-FF:\\\n\\\n![4-Bit-Asynchronzähler-Ausgänge](attachment:image-2.png)\\\n*Abb. 6.1.2: 4-Bit-Asynchronzähler Ausgänge*\\\n\\\nDer 4-Bit-Asynchronzähler zählt also die Taktflanken des vorgegebenen Takts. Die Ausgänge, hier $Q_A$ bis $Q_D$ sind demnach die Binärschreibweise der Anzahl an vergangenen Takten. Diese Schaltung lässt sich jedoch nicht beliebig erweitern, um beliebig große Zahlen zu zählen, da jeder JK-MS-FF eine gewisse Zeit zum durschalten benötigt, welche sich auf die Zeit des Taktes aufaddiert. Dadurch wird der Asynchronzähler langsam und ungenau.","pos":28,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"c561a078b817cf91a06483bacddf01ebc88d1829"},"image-3.png":{"type":"sha1","value":"fa13808b52fde67d7546bb9bda448ab303860c8b"},"image-4.png":{"type":"sha1","value":"24fc1fbd02bdc11ac291d0cac2c70a34117c9e4d"},"image.png":{"type":"sha1","value":"2e6d7eeefbc88183c308214d901aff6d8cafcec5"}},"cell_type":"markdown","id":"aba8c0","input":"**Lösung:**\\\nEin NOT-Gatter lässt sich folgendermaßen realisieren:\\\n\\\n![NOT-Gatter.png](attachment:image.png)\\\n*Abb. 1.2.1: NOT-Gatter*\\\n\\\nIst A auf einem Potential von 5V, so schaltet der Transistor durch, und Strom kann von den angeschlossen 5V im oberen Bildbereich über den Widerstand R3, an dem die Spannung abfällt, zu GND fließen. Da B zwischen Widerstand und Transistor liegt, ist das Potential von B 0V. Falls umgekehrt A auf 0V sein sollte, so schaltet der Transistor nicht durch und es kann kein Strom fließen, daher fällt auch keine Spannung an R3 ab. B liegt folglich auf einem Potential von 5V.\\\n\\\n![NOT Wahrheitstabelle.png](attachment:image-4.png)\\\n*Abb. 1.2.2: NOT Wahrheitstabelle*\\\n\\\nEin NAND-Gatter ist die Kombination eines AND- und eines NOT-Gatters. Hierbei wird der Output des AND-Gatters als Input des NOT-Gatters verwendet. Es lässt sich folgendermaßen realisieren:\\\n\\\n![NAND-Gatter.png](attachment:image-2.png)\\\n*Abb. 1.2.3: NAND-Gatter*\\\n\\\nDie Wahrheitstabelle ergibt sich, indem die Wahrheitstabelle des AND-Gatters negiert wird:\\\n\\\n![NAND-Wahrheitstabelle.png](attachment:image-3.png)\\\n*Abb. 1.2.4: NAND Wahrheitstabelle*\n","pos":6,"type":"cell"}
{"attachments":{"image-2.png":{"type":"sha1","value":"ecc579c72d5f8b68d3d26d464d38809098c992cd"},"image.png":{"type":"sha1","value":"9d722b0c0c205068696aba89240eb075ada69923"}},"cell_type":"markdown","id":"026c8c","input":"**Lösung:**\\\nEin AND-Gatter lässt sich mit Dioden folgendermaßen realisieren:\\\n\\\n![AND-Gatter.png](attachment:image.png)\\\n*Abb. 1.1.1: AND-Gatter*\\\n\\\nFalls A und B auf dem Potential 5V sind, kann an R1 keine Spannung abfallen, folglich ist C auch auf 5V. Ist A, oder und B auf 0V, so kann die Spannung aufgrund der Dioden D1 bzw D2 an R1 abfallen, und C ist auf 0V. Damit ergibt sich folgende Wahrheitstabelle:\\\n\\\n![AND-Wahrheitstabelle.png](attachment:image-2.png)\\\n*Abb. 1.1.2: AND Wahrheitstabelle*\n\n","pos":4,"type":"cell"}
{"attachments":{"image-3.png":{"type":"sha1","value":"e1201610d84136932a330b7d777af3bf38a8e5be"},"image.png":{"type":"sha1","value":"0a030f0a15e27b7e07f28af5f80d53979173195e"}},"cell_type":"markdown","id":"b7d917","input":"**Lösung:**  \nEin Getakteter RS\\-FF \\(RST\\-FF\\) ist ein normaler RS\\-FF mit einem zusätzlichen Eingang, den extern vorgegebenem Takt. Der Takt wird in einem konstanten Intervall auf High und danach wieder auf Low gesetzt. Es ist nur möglich, den Speicherzustand Q zu ändern, wenn der Takt gerade auf High ist. Um dies zu realisieren, wird S und R jeweils mit einem NAND\\-Gatter mit T verknüpft. Die Schaltung ist:  \n  \n![RST-FF-Schaltung](attachment:image.png)  \n_Abb. 4.2.1: RST\\-FF Schaltplan_  \n  \nDie Funktionstabelle lautet also:  \n  \n![RST-FF-Funktionstabelle](attachment:image-3.png)  \n_Abb. 4.2.2: RST\\-FF Funktionstabelle_  \n  \nFalls der Takt gerade auf High ist, ist der RST\\-FF ein ganz normaler FF.  \nEine Möglichkeit, den Verbotenen Zustand zu eliminieren, besteht darain, den Takt auf null zu setzen, falls S und R beide auf High sind. Dazu werden S und R mit einem NAND Gatter vor dem RST\\-FF verknüpft. Der Ausgang aus dem NAND\\-Gatter wird dann mit einem AND\\-Gatter mit dem Takt verknüoft. Der Ausgang aus dem AND\\-Gatter wird dann an den Takt angeschlossen. Sind jetzt S und R High, so ist NAND\\(S, R\\) Low, weshalb auch der Takt auf Null gesetzt wird, also keine Änderungen an dem RST\\-FF vorgenommen werden. Ist mindestens S oder R Low, so ist NAND\\(S, R\\) High, und der Takt ändert sich nicht.\n","pos":22,"type":"cell"}
{"attachments":{"image.png":{"type":"sha1","value":"30346983dd1ab775ca863467f9c72e58bf6dfea0"}},"cell_type":"markdown","id":"4f5160","input":"**Lösung:**\\\n\\\nDer Schalplan für ein 4-Bit-Schieberegister sieht folgendermaßen aus:\\\n\\\n![4-Bit-Schieberegister-Plan](attachment:image.png)\\\n*Abb. 5.1.1: 4-Bit-Schieberegister Schaltplan*\\\n\\\nEin 4-Bit-Schieberegister besteht aus vier aneinandergekoppelten JK-MS-FF. Diese sind so miteinander verbunden, dass der Ausgang des ersten JK-MS-FF ($Q$ und  $\\overline Q$) an die Eingänge des nächsten ($J$ und $K$) angebunden sind. Die Ausgänge $Q_i$ nach dem i-ten JK-MS-FF können auch direkt ausgelesen werden. Des Weiteren sind alles JK-MS-FF an denselben Takt angeschlossen. Sie können auch mit der C Leitung gleichzeitig resetet werden. $J$ und $K$ des ersten FF werden mit der Datenleitung, bzw. mit der negierten Datenleitung angesteuert. (Die Negation deshalb, um den verbotenen Zustand zu umgehen.)\nBei der ersten Taktflanke werden die Eingaben vom Master des ersten JK-MS-FF gelesen, bei der zweiten werden diese vom Slave des ersten JK-MS-FF gelesen. Bei der dritten werden sie an den Master des zweiten JK-MS-FF anliegen. Die Eingegebenen Information werden also immer weiter, zum nächsten JK-MS-FF geschoben, deshalb der Name \"Schieberegister\".","pos":26,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"19f67c","input":"### Aufgabe 4.3: JK-Master-Slave-Flip-Flop (JK-MS-FF) [7400, 7410] \n\nBauen Sie ein JK-MS-FF (siehe Vorbereitungshilfe S.23) auf. Ermitteln Sie seine Funktionstabelle, in der sowohl die Master-, als auch die Slave-Ausgänge enthalten sein sollen, und die zwischen dem 0-1-Wechsel und dem 1-0-Wechsel des Taktsignals unterscheidet. Beschreiben Sie die Unterschiede und Vorteile dieses FF-Typen gegenüber den zuvor untersuchten FF-Typen.\n\n---","pos":23,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"1bccd2","input":"### Aufgabe 1.2: NOT- und NAND-Gatter \n\nBauen Sie zusätzlich zum AND-Gatter ein Transistor-NOT-Gatter auf und bilden Sie durch Hintereinanderschalten ein NAND-Gatter. Prüfen Sie seine Funktion.\n\n---","pos":5,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"4356ba","input":"\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\nName: Aichert    Vorname: Julius E-Mail: uhoeb@student.kit.edu\n\nName: Achtner Vorname: Martin E-Mail: urrvl@student.kit.edu\n\nName: Möll Vorname: Jonas E-Mail: uboyb@student.kit.edu\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\nGruppennummer: Mo01\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\n\nBetreuer: Joshua Gabriel\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\nVersuch durchgeführt am: 06.11.2023","pos":1,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"46c977","input":"### Aufgabe 3.2: Volladdierer [7408, 7486, 7432] **(*)**\n\nÜberlegen Sie sich eine 1-Bit-Volladdierer-Schaltung, die aus zwei Halbaddierern und einem OR-Gatter für deren Übertragsausgänge besteht. Bauen Sie die Schaltung auf und prüfen Sie ihre Funktion.\n\n---","pos":17,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"4888e0","input":"---\n\n**Beanstandungen:**\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n%\\text{\\vspace{10cm}}\n\\end{equation*}\n\n<br>\nTestiert am: __________________ Testat: __________________","pos":2,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"4d0738","input":"# Fakultät für Physik\n\n## Physikalisches Praktikum P1 für Studierende der Physik\n\nVersuch P1-63, 64, 65 (Stand: Oktober 2023)\n\n[Raum F1-08](https://labs.physik.kit.edu/img/Praktikum/Lageplan_P1.png)\n\n\n\n# Schaltlogik","pos":0,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"7291e3","input":"## Aufgabe 6: Zähler \n\nElektronische Zähler sind heute vielbenutzte Messinstrumente. Zählt man Ereignisse während einer bestimmten Zeit, so spricht man bei statistischen Ereignissen von Zählratenmessung, bei periodischen von Frequenzmessung. Speist man den Zähler mit einer periodischen Impulsfolge bekannter Frequenz, erhält man eine Uhr. Gibt eine solche Uhr beim Erreichen einer vorgewählten Zeit ein Schaltsignal ab, dann bezeichnet man sie Timer (oder auch auch Wecker).\n\n### Aufgabe 6.1: 4-Bit-Asynchronzähler [7476] **(*)**\n\nSchalten Sie gemäß Vorbereitungshilfe S.27 vier JK-MS-FF hintereinander, löschen Sie den Inhalt und beobachten Sie nach jedem Taktzyklus am Zählereingang $T$ die an $Q_{A}$, $Q_{B}$, $Q_{C}$, $Q_{D}$ angezeigte Dualzahl.\n\n---","pos":27,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"750417","input":"### Aufgabe 2.3: XOR mit NAND-Gattern [7400] \n\nVersuchen Sie die Umformung der in **Aufgabe 2.2** aufgestellten XOR-Funktion in die Form \n\n$$\nf=\\overline{\\overline{a\\overline{ab}}\\,\\overline{b\\overline{ab}}}. \n$$\n\nRealisieren Sie das XOR in dieser Form und überprüfen Sie seine Funktion.\n\n---","pos":13,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"80bed8","input":"## Aufgabe 5 Schieben, Multiplizieren, Rotieren\n\n### Aufgabe 5.1: 4-Bit-Schieberegister [7400, 7476] **(*)**\n\nBauen Sie ein 4-Bit-Schieberegister (siehe Vorbereitungshilfe S.25) auf. Löschen Sie das Register über den C-Eingang. Laden Sie dann das Register durch geeignete Stellungen des Eingangsschalters bei den folgenden vier Taktzyklen (0-1-0) mit einer gewünschten 4-Bit-Dualzahl. Beobachten Sie nach jeder Taktflanke die Ausgänge $Q_{A}$, $Q_{B}$, $Q_{C}$, $Q_{D}$. Machen Sie sich klar, dass Sie seriell (zeitlich nacheinander auf einer Leitung) ankommende Information jetzt parallel, gleichzeitig auf verschiedenen Leitungen, vorliegen haben. \n\n**Anmerkung:** Da mechanische Schalter beim Ein- und Ausschalten prellen, müssen Sie mit Hilfe eines Flip-Flops ein prellfreies Taktsignal erzeugen (siehe Vorbereitungshilfe S.21).\n\n---","pos":25,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"93a05c","input":"### Aufgabe 1.3: OR-Gatter \n\nBauen Sie ein Dioden-OR-Gatter auf und prüfen Sie seine Funktion.\n\n---","pos":7,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"93f9eb","input":"## Aufgabe 3: Addierer\n\n### Aufgabe 3.1: Halbaddierer [7408, 7486] **(*)**\n\nDer Halbaddierer soll zwei einstellige Dualzahlen addieren. Überlegen Sie sich die zugehörige Wahrheitstabelle (einschließlich Summe und Übertrag). Realisieren Sie den Halbaddierer mit je einem passenden Gatter für Summe und Übertrag und prüfen Sie seine Funktion.\n\n---","pos":15,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"9f7a6a","input":"## Aufgabe 4: Speicherelemente **(*)**\n\nMit dieser Aufgabe stellen wir Ihnen eine Reihe von Flip-Flop-Typen vor. Flip-Flops (FF) sind bistabile Kippstufen, die als digitale Speicher dienen. Sie sind auch die Bausteine von Schieberegistern und Zählern.\n\n### Aufgabe 4.1: RS-Flip-Flop (RS-FF) [7400] \n\nVerbinden Sie zwei NAND-Gatter zu einem FF. Ermitteln Sie seine Funktionstabelle. Eine Funktionstabelle beschreibt die Abhängigkeit der Ausgangszustände (hier an $Q$ und $\\overline{Q}$) von den Eingangszuständen (hier an $R$ (Reset) und $S$ (Set)).\n\n---","pos":19,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"a08775","input":"### Aufgabe 4.2: Getaktetes RS-Flip-Flop (RST-FF) [7400] \n\nBauen Sie ein RST-FF (siehe Vorbereitungshilfe S.19) auf. Ermitteln Sie seine Funktionstabelle. Finden Sie eine Möglichkeit, den „verbotenen Zustand“ zu eliminieren.\n\n---","pos":21,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"a313c5","input":"**Lösung:**\\\nUm ein NOT-Gatter aus einem NAND-Gatter zu realisieren, gibt es zwei verchiedene Möglichkeiten: \\\n1. Die Eingabewerte A und B des NAND-Gatters werden gleichgeschaltet, also A = B. Daraus folgt, dass der AND-Teil den NAND-Gatters immer den Input ergibt, und dieser im NOT-Teil lediglich negiert wird.\n2. Ein Eingabewert, z.B. A, wird auf High gesetzt. Falls B dann Low ist, wird C zu High. Falls B High ist, wird C zu Low.\n\nUm ein NOT-Gatter aus einem NOR-Gatter zu realisieren, gibt es ebenfalls zwei Möglichkeiten: \\\n1. Die Eingabewerte A und B des NOR-Gatters werden gleichgeschaltet, also A = B. Daraus folgt, dass der OR-Teil den NOR-Gatters immer den Input ergibt, und dieser im NOT-Teil lediglich negiert wird.\n2. Ein Eingabewert, z.B. A wird auf Low gesetzt. Der OR-Teil des NOR-Gatters liefert dann immer den Wert von B, welcher im NOT-Teil dann negiert wird.","pos":10,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"ba524f","input":"## Aufgabe 2: Weitere einfache logische Funktionen (Gatter)\n\nDie folgenden Gatter sollen Sie als *Integrated Circuits* (ICs) mit Hilfe einer Experimentiertafel (von Fischer TB05) realisieren. Vergessen Sie nicht, die ICs an die Betriebsspannung ($+5\\,\\mathrm{V}$ und $\\perp$) anzuschließen. Bei allen verwendeten IC-Typen wirken freie Eingänge so, als seien sie an das Potential 'Logisch 1' angeschlossen (sprich 'auf 1 gelegt'). Die bei den Teilaufgaben in eckigen Klammern angegebenen Zahlen bezeichnen die vorgeschlagenen IC-Typ-Nummern.\n\n### Aufgabe 2.1: Inverter (NOT-Gatter) aus NAND- oder NOR-Gatter [7400, 7402]\n\nRealisieren Sie einen digitalen Inverter (NOT-Gatter) aus einem NAND- oder einem NOR-Gatter. Betrachten Sie hierzu die Wahrheitstabellen der Gatter. Es gibt für beide Gatter jeweils zwei verschiedene Möglichkeiten, einen Inverter zu realisieren. Das Invertieren einer Dualziffer (der wechselseitige Austausch von 0 und 1) wird auch als 'Negieren' bezeichnet. Dies sollte nicht mit der negativen Zahl (vgl. **Aufgabe 3.3**) verwechselt werden. Das Invertieren aller Ziffern einer Dualzahl wird auch als 'Komplementieren' bezeichnet.\n\n---","pos":9,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"c66256","input":"### Aufgabe 2.2: XOR [7400, 7408, 7432] \n\nLesen Sie aus der Wahrheitstabelle der XOR-Funktion (siehe Vorbereitungshilfe S.10) deren disjunktive Normalform ab. Realisieren Sie diese (ohne vorherige Umformung) mit Hilfe von Gattern und überprüfen Sie die Funktion der Schaltung. Sie lernen hiermit ein Verfahren kennen, mit dessen Hilfe Sie ein zunächst nur durch eine Wahrheitstabelle gegebenes Problem durch eine Schaltlogik-Funktion (in der Booleschen Algebra) beschreiben und schließlich als logische Schaltung realisieren können.\n\n---","pos":11,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"c990b7","input":"Anmerkung: Alle Bilder sind, falls nicht anders angegeben, aus der Vorbereitungsdatei https://gitlab.kit.edu/kit/etp-lehre/p1-praktikum/students/-/blob/main/Schaltlogik/doc/Schaltlogik-Hilfe.pdf entnommen worden.","pos":29,"type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"d156d4","input":"# Durchführung\n\nDieser Praktikumsversuch ist so gegliedert, dass die einzelnen Aufgabenteile eine logische Folge bilden. Auch ohne Vorkenntnisse erhalten Sie so wertvolle Einblicke in die Grundlagen der Digitaltechnik. Es genügt, wenn Sie etwa zwei Drittel der vorgeschlagenen Aufgaben bearbeiten. Treffen Sie Ihre Auswahl je nach Vorkenntnissen und Interesse. Die mit **(*)** gekennzeichneten **Aufgaben 3.1** und **3.2**, **4**, **5.1** und **6.1 sollten jedoch auf jeden Fall bearbeitet werden**. \n\n## Aufgabe 1: Gatter aus diskreten Bauelementen \n\nBei dieser Aufgabe lernen Sie einfachste Grundschaltungen der Schaltlogik kennen.\n\n### Aufgabe 1.1: Das AND-Gatter \n\nBauen Sie ein Dioden-AND-Gatter auf und prüfen Sie seine Funktion.\n\n---","pos":3,"type":"cell"}
{"backend_state":"init","kernel":"python3-ubuntu","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"}},"trust":false,"type":"settings"}
{"id":0,"time":1699892026966,"type":"user"}
{"last_load":1699892027882,"type":"file"}