{"args":["--to","cocalc-pdf"],"start":1699897431967,"state":"done","time":1699897440985,"type":"nbconvert"}
{"attachments":{},"cell_type":"code","end":1699898050236,"exec_count":123,"id":"f11a6a","input":"d_von_U = np.genfromtxt( \"d_von_U.csv\", delimiter=\",\", skip_header=1 ) # Einlesen der Daten, speichern in Variablen\nU = d_von_U[:,0]\nI = d_von_U[:,1]\nd = d_von_U[:,2]\n\ndef dmodel(U, I, me): # x = U/I**2\n    N = 130\n    R = 0.15\n    x = U/I**2\n    return x * me * (125 * R**2) / (8 * mu**2 * N**2)\n\nI_error = 0.05 # relative; nochmal beim Netzgerät nachschauen\nU_error = 0.01 # relative; nochmal beim Netzgerät nachschauen, hier nicht die Hall Spannung\nd_error = 0.1 # relative\n\n#first with data for which I = 1A\nfit = kafe2.XYFit(xy_data=[U[:5], d[:5]], model_function=dmodel) \nfit.add_error(axis='y', err_val=d_error, relative=True)\nfit.add_error(axis='x', err_val=U_error, relative=True)\n\nfit.add_parameter_constraint(name='I',   value=1,   uncertainty=I_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()\n\n#now with data for which I = 2A\nfit = kafe2.XYFit(xy_data=[U[5:], d[5:]], model_function=dmodel) \nfit.add_error(axis='y', err_val=d_error, relative=True)\nfit.add_error(axis='x', err_val=U_error, relative=True)\n\nfit.add_parameter_constraint(name='I', value=2, uncertainty=I_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()\n\n","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"7c5a9ae83951242b8c5247d3c171263f332e7f97","text/plain":"<Figure size 1200x500 with 2 Axes>"},"metadata":{"image/png":{"height":490,"width":1188}}},"1":{"data":{"image/png":"8a9e5a40e36b89a6f211be0e0508e216a6af0dd1","text/plain":"<Figure size 1200x500 with 2 Axes>"},"metadata":{"image/png":{"height":490,"width":1188}}}},"pos":11,"start":1699898048489,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"1993ee","input":"### Aufgabe 1.2: Elektronenkreisbahn\n\nBestimmen Sie den Durchmesser $d$ der Elektronenbahn im Fadenstrahlrohr in zwei Messreihen: \n\n * Als als Funktion der Anodenspannung $U$ (z.B. mit sechs Messpunkten  $100$; $125$; $\\ldots 250\\,\\mathrm{V}$) für zwei Spulenströme (z.B. $1\\,\\mathrm{A}$ und $2\\,\\mathrm{A}$).\n * Als Funktion des Spulenstroms $I$ (z.B. mit zehn Messpunkten $1,0$; $1,2$; $\\ldots 2,0\\,\\mathrm{A}$) für zwei Anodenspannungen (z.B. $125\\,\\mathrm{V}$ und $250\\,\\mathrm{V}$).\n \n---","pos":10,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"1c90b1","input":"# Durchführung\n\n## Aufgabe 1: Fadenstrahlrohr\n\n**Hinweise zu allen hier durchzuführenden Messungen finden Sie in der Datei [Hinweise-Aufgabe-1.md](https://git.scc.kit.edu/etp-lehre/p1-for-students/-/blob/main/Spezifische_Lading_des_Elektrons/doc/Hinweise-Aufgabe-1.md).**\n\n### Aufgabe 1.1: Magnetfeld im Fadenstrahlrohr\n\n * Schätzen Sie das Magnetfeld $B$, entlang der Mittelebene zwischen $H_{1}$ und $H_{2}$ im Inneren der Spulen, mit Hilfe einer baugleichen, weiteren Helmholtzspule $H_{3}$, einer, an verschiedenen Stellen mit Bohrungen versehenen, Holzplatte $M$, und einer [Hall-Sonde](https://de.wikipedia.org/wiki/Hall-Effekt) ab. Dabei bezeichnet $r$ im Folgenden den Abstand von der Symmetrieachse des Spulenpaares.\n * Kalibrieren Sie die Hall-Sonde mit Hilfe einer weiteren, langen Spule, deren Magnetfeld Sie über das [Ampèresche Gesetz](https://de.wikipedia.org/wiki/Amp%C3%A8resches_Gesetz#Magnetfeld_der_Spule) bestimmen können.\n * Diskutieren Sie die Homogenität von $B(r)$ für die vorliegende Spulenanordnung. \n * Vergleichen Sie Ihre Messung für $r=0$ mit Ihrer Erwartung. \n \n---","pos":3,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"49c5df","input":"## Aufgabe 2: Methode von Busch\n\n**Hinweise zu allen hier durchzuführenden Messungen finden Sie in der Datei [Hinweise-Aufgabe-2.md](https://git.scc.kit.edu/etp-lehre/p1-for-students/-/blob/main/Spezifische_Lading_des_Elektrons/doc/Hinweise-Aufgabe-2.md).**\n\n### Aufgabe 2.1: Vorbereitung der Messung\n\nMachen Sie sich mit der Methode zur Bestimmung der von $e/m_{e}$ nach der Methode von Busch vertraut. Verändern Sie hierzu bei vorgegebener Beschleunigungsspannung $U_{z}$ den Spulenstrom, und erklären Sie Ihre Beobachtungen mit eigenen Worten.\n\n---","pos":15,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"5fe754","input":"**Lösung:**","pos":5,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"9afd74","input":"**Lösung:**\n\n*Sie können Ihr Protokoll direkt in dieses Dokument einfügen. Wenn Sie dieses Dokument als Grundlage für ein [Jupyter notebook](https://jupyter.org/) verwenden wollen können Sie die Auswertung, Skripte und ggf. bildliche Darstellungen mit Hilfe von [python](https://www.python.org/) ebenfalls hier einfügen. Löschen Sie hierzu diesen kursiv gestellten Text aus dem Dokument.* \n\n---","pos":16,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"9b3c89","input":"Name: Aichert    Vorname: Julius E-Mail: uhoeb@student.kit.edu\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\nName: Achtner   Vorname: Martin E-Mail: urrvl@student.kit.edu\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\nGruppennummer: Mo01\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\n\nBetreuer: __________________\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n\\end{equation*}\n\nVersuch durchgeführt am: 8.11.2023","pos":1,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"b427a9","input":"### Aufgabe 2.2: Bestimmung von $e/m_{\\mathrm{e}}$ \n\nMessen Sie für Beschleunigungsspannungen von $U = 200\\,\\ldots 700\\,\\mathrm{V}$ (in Schritten von $50\\,\\mathrm{V}$) den nötigen Spulenstrom $I$, um auf dem Schirm einen Signalpunkt zu erzeugen. Gehen Sie dabei, für jeden Messpunkt so, wie in Aufgabe 2.1 vor. Tragen Sie $U$ geeignet über $I^{2}$ auf und ermitteln Sie daraus $e/m_{\\mathrm{e}}$. \n\n---","pos":17,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"b7c520","input":"**Lösung:**\n\n*Sie können Ihr Protokoll direkt in dieses Dokument einfügen. Wenn Sie dieses Dokument als Grundlage für ein [Jupyter notebook](https://jupyter.org/) verwenden wollen können Sie die Auswertung, Skripte und ggf. bildliche Darstellungen mit Hilfe von [python](https://www.python.org/) ebenfalls hier einfügen. Löschen Sie hierzu diesen kursiv gestellten Text aus dem Dokument.* \n\n---","pos":18,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"c5a603","input":"<img src=\"./figures/Logo_KIT.svg\" width=200px style=\"float:right;\" />\n\n# Fakultät für Physik \n\n## Physikalisches Praktikum P1 für Studierende der Physik\n\nVersuch P1-71, 72, 73 (Stand: Dezember 2022)\n\n[Raum F1-14](http://www-ekp.physik.uni-karlsruhe.de/~simonis/praktikum/layoutobjekte/Lageplan_P1.png)\n\n# Spezifische Ladung des Elektrons","pos":0,"state":"done","type":"cell"}
{"attachments":{},"cell_type":"markdown","id":"c7011d","input":"---\n\n**Beanstandungen:**\n\n\\begin{equation*}\n\\begin{split}\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n&\\\\\n\\end{split}\n%\\text{\\vspace{10cm}}\n\\end{equation*}\n\n<br>\nTestiert am: __________________ Testat: __________________\n\n","pos":2,"state":"done","type":"cell"}
{"backend_state":"running","connection_file":"/projects/eb6e81da-7863-4e97-93a4-17a5f721b0e7/.local/share/jupyter/runtime/kernel-ef473cca-026c-48fa-8640-bad65d4d1d61.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.1"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1699893699496,"exec_count":4,"id":"365df7","input":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport kafe2\n#import PhyPraKit as ppk\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport os\nimport scipy\nmpl.rcParams['figure.dpi']=200\nmu = scipy.constants.mu_0","kernel":"python3-ubuntu","pos":4,"start":1699893698628,"state":"done","type":"cell"}
{"cell_type":"code","end":1699893702415,"exec_count":6,"id":"61d817","input":"hall_helmh = np.genfromtxt( \"hall_spannung_helmholtz.csv\", delimiter=\",\", skip_header=1 ) # Einlesen der Daten, speichern in Variablen\npos = hall_helmh[:,0]\nI_helmh = hall_helmh[:,1]\nU_helmh = hall_helmh[:,2]\n#print(pos, I_helmh, U_helmh)\nhall_cal = np.genfromtxt( \"hall_spannung_kalibrierung.csv\", delimiter=\",\", skip_header=1 ) # Einlesen der Daten, speichern in Variablen\nI_cal = hall_cal[:,0]\nU_cal = hall_cal[:,1]","kernel":"python3-ubuntu","pos":6,"start":1699893702405,"state":"done","type":"cell"}
{"cell_type":"code","end":1699895341400,"exec_count":29,"id":"30db51","input":"def I_hall(U, m, N):\n    l = 0.3\n    return m * U / (mu * N) * l\nI_error = 0.001\nU_error = 0.001 \nN_error = 0.01 # relative\nfit = kafe2.XYFit(xy_data=[-U_cal * 10**(-3), I_cal], model_function=I_hall) \nfit.add_error(axis='y', err_val=I_error)\nfit.add_error(axis='x', err_val=U_error)\n\nfit.add_parameter_constraint(name='N',   value=750,   uncertainty=N_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()\n\npar_vals = fit.parameter_values\npar_err = fit.parameter_errors\nm = par_vals[0]\nm_err = par_err[0]\nprint(m)","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"f0c2d8d05bc233e2a93e92ac39cfc77ea56916cb","text/plain":"<Figure size 1200x500 with 2 Axes>"},"metadata":{"image/png":{"height":490,"width":1188}}},"1":{"name":"stdout","text":"0.03245911992610037\n"}},"pos":8,"start":1699895340799,"state":"done","type":"cell"}
{"cell_type":"code","end":1699895574045,"exec_count":37,"id":"ef1ee8","input":"# bestimme zuerst konstante K * (ds - d2) für den Mittelwert des Magnetfeldes\nl = 0.2  # +- 0.0005\nR = 0.045 # +-0.0005\nN = 3000\nd2 = 0.08 # +- 0.001\nds = 0.15\ndef B(a):\n    return mu * N / l * 0.567 * (a/np.sqrt(R**2 + a**2) + (l - a)/np.sqrt(R**2 + (l - a)**2))\nk =  scipy.integrate.quad(B, d2, ds)","kernel":"python3-ubuntu","pos":19,"start":1699895574041,"state":"done","type":"cell"}
{"cell_type":"code","end":1699896184416,"exec_count":53,"id":"31deb2","input":"k0 = k[0]#0.0013435370205851793\n\nk1 = 0.0013412079923252028 # + in l\nk2 = 0.0013458624795267087 # - in l\n\nk3 = 0.0013407491868634852 # + in R\nk4 = 0.0013463147265669803 # - in R\n\nk5 = 0.0013242059973940048 # + in d2\nk6 = 0.0013628503364845855 # - in d2\n\ndk = np.sqrt((k1-k0)**2 + (k2-k0)**2 + (k3-k0)**2 + (k4-k0)**2 + (k5-k0)**2 + (k6-k0)**2 + (k[1])**2) # systematic and numerical error on k\nprint(dk)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"2.7803101049229007e-05\n"}},"pos":20,"start":1699896184408,"state":"done","type":"cell"}
{"cell_type":"code","end":1699896731257,"exec_count":72,"id":"8be9d4","input":"busch_data = np.genfromtxt(\"busch.csv\", delimiter=\",\", skip_header=1 )\nU_b = busch_data[:,0]\nI_b = busch_data[:,1]\nprint(I_b)\n\ndef busch_U(I, K, em):\n    return 1/(np.pi * 8) * K**2 * em * I**2\n\nI_error = 0.015\nU_error = 1\n\nfit = kafe2.XYFit(xy_data=[I_b, U_b], model_function=busch_U) \nfit.add_error(axis='y', err_val=U_error)\nfit.add_error(axis='x', err_val=I_error)\n\nfit.add_parameter_constraint(name=\"K\", value=k0, uncertainty=dk)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[0.202 0.239 0.271 0.299 0.319 0.333 0.359 0.379 0.394 0.404 0.421]\n"},"1":{"data":{"image/png":"bd23d2c32df686e32fbea67ec926357faa7bb01f","text/plain":"<Figure size 1200x500 with 2 Axes>"},"metadata":{"image/png":{"height":490,"width":1188}}}},"pos":21,"start":1699896730575,"state":"done","type":"cell"}
{"cell_type":"code","end":1699897369380,"exec_count":93,"id":"34972e","input":"\"\"\"d_von_U = np.genfromtxt( \"d_von_U.csv\", delimiter=\",\", skip_header=1 ) # Einlesen der Daten, speichern in Variablen\nU = d_von_U[:,0]\nI = d_von_U[:,1]\nd = d_von_U[:,2]\n\ndef dmodel(U, I, me): # x = U/I**2\n    N = 130\n    R = 0.15\n    x = U \n    return x * me * (125 * R**2) / (8 * mu**2 * N**2)\n\n\nd_error = 0.1 # relative\n\n\n#first with data for which I = 1A\nfit = kafe2.XYFit(xy_data=[U[:7], d[:7]], model_function=dmodel) \nfit.add_error(axis='y', err_val=d_error, relative=True)\nfit.add_error(axis='x', err_val=U_error, relative=True)\n\nfit.add_parameter_constraint(name=I, value=1, uncertainty=I_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()\n\n#now with data for which I = 2A\nfit = kafe2.XYFit(xy_data=[U[7:13], d[7:13]], model_function=d) \nfit.add_error(axis='y', err_val=d_error, relative=True)\nfit.add_error(axis='x', err_val=U_error, relative=True)\n\nfit.add_parameter_constraint(name=I, value=2, uncertainty=I_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.show()\"\"\"","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"'d_von_U = np.genfromtxt( \"d_von_U.csv\", delimiter=\",\", skip_header=1 ) # Einlesen der Daten, speichern in Variablen\\nU = d_von_U[:,0]\\nI = d_von_U[:,1]\\nd = d_von_U[:,2]\\n\\ndef dmodel(U, I, me): # x = U/I**2\\n    N = 130\\n    R = 0.15\\n    x = U \\n    return x * me * (125 * R**2) / (8 * mu**2 * N**2)\\n\\n\\nd_error = 0.1 # relative\\n\\n\\n#first with data for which I = 1A\\nfit = kafe2.XYFit(xy_data=[U[:7], d[:7]], model_function=dmodel) \\nfit.add_error(axis=\\'y\\', err_val=d_error, relative=True)\\nfit.add_error(axis=\\'x\\', err_val=U_error, relative=True)\\n\\nfit.add_parameter_constraint(name=I, value=1, uncertainty=I_error, relative=True)\\n\\nfit.do_fit()\\nplot = kafe2.Plot(fit)\\nplot.plot()\\nplot.show()\\n\\n#now with data for which I = 2A\\nfit = kafe2.XYFit(xy_data=[U[7:13], d[7:13]], model_function=d) \\nfit.add_error(axis=\\'y\\', err_val=d_error, relative=True)\\nfit.add_error(axis=\\'x\\', err_val=U_error, relative=True)\\n\\nfit.add_parameter_constraint(name=I, value=2, uncertainty=I_error, relative=True)\\n\\nfit.do_fit()\\nplot = kafe2.Plot(fit)\\nplot.show()'"},"exec_count":93}},"pos":13,"start":1699897369374,"state":"done","type":"cell"}
{"cell_type":"code","end":1699898480283,"exec_count":143,"id":"9f602d","input":"d_von_U = np.genfromtxt( \"d_von_I.csv\", delimiter=\",\", skip_header=1 ) # Einlesen der Daten, speichern in Variablen\nU = d_von_U[:,0]\nI = d_von_U[:,1]\nd = d_von_U[:,2]\n\ndef dmodel(I, U, me): # x = U/I**2\n    N = 130\n    R = 0.15\n    x = U/I**2 \n    return x * me * (125 * R**2) / (8 * mu**2 * N**2)\n\nI_error = 0.05 # relative; nochmal beim Netzgerät nachschauen\nU_error = 0.01 # relative; nochmal beim Netzgerät nachschauen, hier nicht die Hall Spannung\nd_error = 0.1 # relative\n\n#first with data for which I = 1A\nfit = kafe2.XYFit(xy_data=[I[:10], d[:10]], model_function=dmodel) \nfit.add_error(axis='y', err_val=d_error, relative=True)\nfit.add_error(axis='x', err_val=I_error, relative=True)\n\nfit.add_parameter_constraint(name='U',   value=125,   uncertainty=U_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()\nprint(I[10:], I[:10])\n#now with data for which I = 2A\nfit = kafe2.XYFit(xy_data=[I[10:], d[10:]], model_function=dmodel) \nfit.add_error(axis='y', err_val=d_error, relative=True)\nfit.add_error(axis='x', err_val=I_error, relative=True)\n\nfit.add_parameter_constraint(name='U', value=250, uncertainty=U_error, relative=True)\n\nfit.do_fit()\nplot = kafe2.Plot(fit)\nplot.plot()\nplot.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"8de406d23e72fa3f5fac2f2676f0bf4a449ca354","text/plain":"<Figure size 1200x500 with 2 Axes>"},"metadata":{"image/png":{"height":490,"width":1188}}},"1":{"name":"stdout","text":"[1.298 1.41  1.498 1.599 1.7   1.797 2.   ] [1.    1.1   1.2   1.295 1.4   1.497 1.598 1.7   1.801 2.004]\n"},"2":{"data":{"image/png":"9aa26db4e53db478796dcaea1142ff05c829bfb1","text/plain":"<Figure size 1200x500 with 2 Axes>"},"metadata":{"image/png":{"height":490,"width":1188}}}},"pos":14,"start":1699898478991,"state":"done","type":"cell"}
{"cell_type":"code","end":1699899288325,"exec_count":151,"id":"bd9a3b","input":"def B_helmh(U):\n    return (m * U, np.sqrt((U * m_err)**2 + (m * U_error)**2)) # add error on B with gauss law\n\nB, B_err = B_helmh(U_helmh * 10**(-3))\nprint(B[9])\n\nplt.plot(pos[0:24:3], B[0:24:3])\nplt.plot(pos[1:25:3], B[1:25:3])\nplt.plot(pos[2:26:3], B[2:26:3])\nplt.show()\n\nplt.plot(pos[24:37:3], B[24:37:3])\nplt.plot(pos[25:37:3], B[25:37:3])\nplt.plot(pos[26:37:3], B[26:37:3])\nplt.show()\n\nfor n in range(0, 3):\n       plt.plot([0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4], [B[9 + n], B[6 + n], B[12 + n], B[27 + n], B[30 + n], B[3 + n], B[15 + n], B[24 + n], B[33 + n], B[0 + n], B[18 + n], B[21 + n]]  , \"x\")\nplt.plot()","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"0.0009069078107352444\n"},"1":{"data":{"image/png":"88be2a849215a7f4bb938fabde6889b1c125a180","text/plain":"<Figure size 2400x1400 with 1 Axes>"},"metadata":{"image/png":{"height":1164,"width":2016}}},"2":{"data":{"image/png":"c802f34cd3d2f3b67cfaa3eb9e2f7dcc0fde643c","text/plain":"<Figure size 2400x1400 with 1 Axes>"},"metadata":{"image/png":{"height":1164,"width":2016}}},"3":{"data":{"text/plain":"[]"},"exec_count":151},"4":{"data":{"image/png":"ee5f8478981f36a64beea9ed62e94ca7de1c72df","text/plain":"<Figure size 2400x1400 with 1 Axes>"},"metadata":{"image/png":{"height":1164,"width":2016}}}},"pos":9,"start":1699899285799,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5537b7","input":"Bei einer Stromstärke von 2.002 A varriiert der Wert vor und nach der Messung, aufgrund von Erhitzung um 52.20 mV und 51.49mV\nBei der Kallibrierung wurde keine nennenswerten Unterschiede zwischen der ersten und der letzten Messung bei der Hallspannung festgestellt.","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e9301c","input":"Wert bei 250A und 1 V-1,2V konnte nicht bestimmt werden.","pos":12,"state":"done","type":"cell"}
{"id":"e1dee9","input":"","pos":22,"type":"cell"}
{"id":0,"time":1699893688982,"type":"user"}
{"last_load":1699892011091,"type":"file"}